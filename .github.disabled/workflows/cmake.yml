name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      # run: brew install googletest leveldb s2geometry protobuf
      run: sudo apt-get install -y libgflags-dev googletest libgtest-dev libssl-dev libleveldb-dev protobuf-compiler ninja-build

    - name: Build and install Abseil
      run: |
        mkdir -p ${{github.workspace}}/dependencies/{include,lib,share}
        git clone https://github.com/abseil/abseil-cpp.git ${{github.workspace}}/dependencies/abseil-cpp
        mkdir ${{github.workspace}}/dependencies/abseil-cpp/build
        cmake -S ${{github.workspace}}/dependencies/abseil-cpp \
          -B ${{github.workspace}}/dependencies/abseil-cpp/build \
          -DCMAKE_PREFIX_PATH=${{github.workspace}}/dependencies \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dependencies \
          -DABSL_ENABLE_INSTALL=ON -DCMAKE_CXX_STANDARD=17 \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DABSL_USE_EXTERNAL_GOOGLETEST=ON -DABSL_FIND_GOOGLETEST=ON \
          -G Ninja
        cmake --build ${{github.workspace}}/dependencies/abseil-cpp/build
        cmake --build ${{github.workspace}}/dependencies/abseil-cpp/build --target install

    - name: Build and install s2geometry
      run: |
        git clone https://github.com/google/s2geometry.git ${{github.workspace}}/dependencies/s2
        mkdir ${{github.workspace}}/dependencies/s2/build
        cmake -S ${{github.workspace}}/dependencies/s2 \
          -B ${{github.workspace}}/dependencies/s2/build \
          -DCMAKE_PREFIX_PATH=${{github.workspace}}/dependencies \
          -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dependencies \
          -DCMAKE_CXX_STANDARD=17 \
          -G Ninja
        cmake --build ${{github.workspace}}/dependencies/s2/build
        cmake --build ${{github.workspace}}/dependencies/s2/build --target install

    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_PREFIX_PATH=${{github.workspace}}/dependencies \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

